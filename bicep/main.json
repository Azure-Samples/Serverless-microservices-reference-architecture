{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "8701539398809098241"
    }
  },
  "parameters": {
    "applicationName": {
      "type": "string",
      "defaultValue": "Rideshare"
    },
    "staticWebAppLocation": {
      "type": "string",
      "allowedValues": [
        "centralus",
        "eastus2",
        "eastasia",
        "westeurope",
        "westus2"
      ]
    },
    "sqlAdminLogin": {
      "type": "string"
    },
    "sqlAdminPassword": {
      "type": "secureString"
    },
    "resourceTags": {
      "type": "object",
      "defaultValue": {
        "ProjectType": "Azure Serverless Microservices",
        "Purpose": "Sample"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "variables": {
    "functionAppServicePlanName": "[format('{0}Plan', parameters('applicationName'))]",
    "keyVaultName": "[format('{0}KeyVault', parameters('applicationName'))]",
    "cosmosdbName": "[format('{0}Cosmos', parameters('applicationName'))]",
    "eventGridName": "[format('{0}TripExternalizations', parameters('applicationName'))]",
    "signalRName": "[parameters('applicationName')]",
    "applicationInsightsName": "[format('{0}Insights', parameters('applicationName'))]",
    "apimName": "[format('{0}Apim', parameters('applicationName'))]",
    "sqlServerName": "[format('{0}-db', parameters('applicationName'))]",
    "staticWebAppName": "[format('{0}Web', parameters('applicationName'))]",
    "storageAccountName": "[take(toLower(replace(format('{0}func', parameters('applicationName')), '-', '')), 24)]",
    "functionsApps": [
      "Trips",
      "Drivers",
      "Passengers",
      "TripArchiver",
      "Orchestrators"
    ],
    "functionRuntime": "dotnet",
    "functionVersion": "~4"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}Trips', parameters('applicationName'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[reference(resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))).outputs.appServicePlanId.value]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "[variables('functionVersion')]"
            },
            {
              "name": "DocDbApiKey",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbPrimaryKey)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbEndpointUri",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbEndpoint)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbRideShareDatabaseName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBDatabaseName.value]"
            },
            {
              "name": "DocDbRideShareMainCollectionName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBRideMainCollectionName.value]"
            },
            {
              "name": "DocDbThroughput",
              "value": "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBThroughput.value)]"
            },
            {
              "name": "InsightsInstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "IsEnqueueToOrchestrators",
              "value": "true"
            },
            {
              "name": "TripManagersQueue",
              "value": "trip-managers"
            },
            {
              "name": "TripMonitorsQueue",
              "value": "trip-monitors"
            },
            {
              "name": "TripDemosQueue",
              "value": "trip-demos"
            },
            {
              "name": "AuthorityUrl",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/AuthorityUrl)', variables('keyVaultName'))]"
            },
            {
              "name": "ApiApplicationId",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/ApiApplicationId)', variables('keyVaultName'))]"
            },
            {
              "name": "ApiScopeName",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/ApiScopeName)', variables('keyVaultName'))]"
            },
            {
              "name": "EnableAuth",
              "value": "true"
            },
            {
              "name": "SqlConnectionString",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/SqlConnectionString)', variables('keyVaultName'))]"
            },
            {
              "name": "AzureSignalRConnectionString",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/AzureSignalRConnectionString)', variables('keyVaultName'))]"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "[reference(resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))).outputs.staticWebAppURL.value]"
            ]
          }
        },
        "httpsOnly": true
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}Drivers', parameters('applicationName'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[reference(resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))).outputs.appServicePlanId.value]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "[variables('functionVersion')]"
            },
            {
              "name": "DocDbApiKey",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbPrimaryKey)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbEndpointUri",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbEndpoint)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbRideShareDatabaseName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBDatabaseName.value]"
            },
            {
              "name": "DocDbRideShareMainCollectionName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBRideMainCollectionName.value]"
            },
            {
              "name": "DocDbThroughput",
              "value": "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBThroughput.value)]"
            },
            {
              "name": "InsightsInstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "AuthorityUrl",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/AuthorityUrl)', variables('keyVaultName'))]"
            },
            {
              "name": "ApiApplicationId",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/ApiApplicationId)', variables('keyVaultName'))]"
            },
            {
              "name": "ApiScopeName",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/ApiScopeName)', variables('keyVaultName'))]"
            },
            {
              "name": "EnableAuth",
              "value": "true"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "[reference(resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))).outputs.staticWebAppURL.value]"
            ]
          }
        },
        "httpsOnly": true
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}Passengers', parameters('applicationName'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[reference(resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))).outputs.appServicePlanId.value]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "[variables('functionVersion')]"
            },
            {
              "name": "DocDbApiKey",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbPrimaryKey)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbEndpointUri",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbEndpoint)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbRideShareDatabaseName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBDatabaseName.value]"
            },
            {
              "name": "DocDbRideShareMainCollectionName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBRideMainCollectionName.value]"
            },
            {
              "name": "DocDbThroughput",
              "value": "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBThroughput.value)]"
            },
            {
              "name": "InsightsInstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "AuthorityUrl",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/AuthorityUrl)', variables('keyVaultName'))]"
            },
            {
              "name": "ApiApplicationId",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/ApiApplicationId)', variables('keyVaultName'))]"
            },
            {
              "name": "ApiScopeName",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/ApiScopeName)', variables('keyVaultName'))]"
            },
            {
              "name": "EnableAuth",
              "value": "true"
            },
            {
              "name": "GraphTenantId",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/GraphTenantId)', variables('keyVaultName'))]"
            },
            {
              "name": "GraphClientId",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/GraphClientId)', variables('keyVaultName'))]"
            },
            {
              "name": "GraphClientSecret",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/GraphClientSecret)', variables('keyVaultName'))]"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "[reference(resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))).outputs.staticWebAppURL.value]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}Passengers', parameters('applicationName'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[reference(resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))).outputs.appServicePlanId.value]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-08-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "[variables('functionVersion')]"
            },
            {
              "name": "DocDbApiKey",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbPrimaryKey)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbEndpointUri",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbEndpoint)', variables('keyVaultName'))]"
            },
            {
              "name": "DocDbRideShareDatabaseName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBDatabaseName.value]"
            },
            {
              "name": "DocDbRideShareMainCollectionName",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBRideMainCollectionName.value]"
            },
            {
              "name": "DocDbThroughput",
              "value": "[format('{0}', reference(resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))).outputs.cosmosDBThroughput.value)]"
            },
            {
              "name": "InsightsInstrumentationKey",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
            },
            {
              "name": "DriversAcknowledgeMaxWaitPeriodInSeconds",
              "value": "120"
            },
            {
              "name": "DriversLocationRadiusInMiles",
              "value": "15"
            },
            {
              "name": "TripMonitorIntervalInSeconds",
              "value": "10"
            },
            {
              "name": "TripMonitorMaxIterations",
              "value": "20"
            },
            {
              "name": "IsPersistDirectly",
              "value": "true"
            },
            {
              "name": "TripManagersQueue",
              "value": "trip-managers"
            },
            {
              "name": "TripMonitorsQueue",
              "value": "trip-monitors"
            },
            {
              "name": "TripDemosQueue",
              "value": "trip-demos"
            },
            {
              "name": "TripDriversQueue",
              "value": "trip-drivers"
            },
            {
              "name": "TripExternalizationsEventGridTopicUrl",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('eventGridName'))).outputs.eventGripEndpoint.value]"
            },
            {
              "name": "TripExternalizationsEventGridTopicApiKey",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/TripExternalizationsEventGridTopicApiKey)', variables('keyVaultName'))]"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "[reference(resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))).outputs.staticWebAppURL.value]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('functionAppServicePlanName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('cosmosdbName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('eventGridName'))]",
        "[resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[format('{0}TripArchiver', parameters('applicationName'))]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "DocDbConnectionString",
              "value": "[format('@Microsoft.KeyVault(SecretUri=https:://{0}.vault.azure.net/secrets/CosmosDbConnectionString)', variables('keyVaultName'))]"
            }
          ],
          "cors": {
            "allowedOrigins": [
              "[reference(resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))).outputs.staticWebAppURL.value]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('staticWebAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('cosmosdbName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[variables('cosmosdbName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "databaseName": {
            "value": "[parameters('applicationName')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "10836054490273803686"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string",
              "metadata": {
                "description": "Cosmos DB account name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for the Cosmos DB account."
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "The name for the Core (SQL) database"
              }
            },
            "resourceTags": {
              "type": "object"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault to store secrets in."
              }
            },
            "throughput": {
              "type": "int",
              "defaultValue": 400
            }
          },
          "variables": {
            "containerNames": [
              "main",
              "archiver"
            ],
            "cosmosDbConnectionStringSecretName": "CosmosDbConnectionString",
            "cosmosDbPrimaryKeySecretName": "CosmosDbPrimaryKey",
            "cosmosDbEndpointSecretName": "CosmosDbEndpoint"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2021-06-15",
              "name": "[toLower(parameters('accountName'))]",
              "kind": "GlobalDocumentDB",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "enableFreeTier": false,
                "locations": [
                  {
                    "locationName": "[parameters('location')]"
                  }
                ],
                "backupPolicy": {
                  "type": "Periodic",
                  "periodicModeProperties": {
                    "backupIntervalInMinutes": 240,
                    "backupRetentionIntervalInHours": 8
                  }
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}', toLower(parameters('accountName')), format('{0}', toLower(parameters('databaseName'))))]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "resource": {
                  "id": "[format('{0}', toLower(parameters('databaseName')))]"
                },
                "options": {
                  "throughput": "[parameters('throughput')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            },
            {
              "copy": {
                "name": "containers",
                "count": "[length(variables('containerNames'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2021-06-15",
              "name": "[format('{0}/{1}/{2}', toLower(parameters('accountName')), format('{0}', toLower(parameters('databaseName'))), variables('containerNames')[copyIndex()])]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "resource": {
                  "id": "[variables('containerNames')[copyIndex()]]",
                  "partitionKey": {
                    "paths": [
                      "/code"
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('accountName')), format('{0}', toLower(parameters('databaseName'))))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('cosmosDbPrimaryKeySecretName'))]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName'))), '2021-06-15').primaryMasterKey]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('cosmosDbConnectionStringSecretName'))]",
              "properties": {
                "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName'))), '2021-06-15').connectionStrings[0].connectionString]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('cosmosDbEndpointSecretName'))]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))).documentEndpoint]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('accountName')))]"
              ]
            }
          ],
          "outputs": {
            "cosmosDBAccountName": {
              "type": "string",
              "value": "[toLower(parameters('accountName'))]"
            },
            "cosmosDBDatabaseName": {
              "type": "string",
              "value": "[format('{0}', toLower(parameters('databaseName')))]"
            },
            "cosmosDBRideMainCollectionName": {
              "type": "string",
              "value": "[variables('containerNames')[0]]"
            },
            "cosmosDBThroughput": {
              "type": "int",
              "value": "[parameters('throughput')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "sqldb",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "sqlServerName": {
            "value": "[variables('sqlServerName')]"
          },
          "sqlDatabaseName": {
            "value": "[parameters('applicationName')]"
          },
          "administratorLogin": {
            "value": "[parameters('sqlAdminLogin')]"
          },
          "administratorPassword": {
            "value": "[parameters('sqlAdminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "3153046550953969148"
            }
          },
          "parameters": {
            "sqlServerName": {
              "type": "string"
            },
            "sqlDatabaseName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "administratorLogin": {
              "type": "string"
            },
            "administratorPassword": {
              "type": "secureString"
            },
            "resourceTags": {
              "type": "object"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault to store secrets in."
              }
            }
          },
          "variables": {
            "sqlDbConnectionStringSecretName": "SqlConnectionString"
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2021-05-01-preview",
              "name": "[parameters('sqlServerName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "version": "12.0"
              }
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2021-05-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabaseName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "sku": {
                "name": "S0",
                "tier": "Standard"
              },
              "properties": {
                "collation": "SQL_Latin1_General_CP1_CI_AS",
                "maxSizeBytes": 268435456000,
                "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
                "zoneRedundant": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('sqlDbConnectionStringSecretName'))]",
              "properties": {
                "value": "[format('Server=tcp:{0}{1},1433;Initial Catalog=db{2};Persist Security Info=False;User ID={3};Password={4};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', parameters('sqlServerName'), environment().suffixes.sqlServerHostname, parameters('sqlDatabaseName'), parameters('administratorLogin'), parameters('administratorPassword'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('sqlDatabaseName'))]",
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('eventGridName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "eventGridTopicName": {
            "value": "[variables('eventGridName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "13429133402434012737"
            }
          },
          "parameters": {
            "eventGridTopicName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Event Grid Topic"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location that the Event Grid Topic will be deployed to"
              }
            },
            "resourceTags": {
              "type": "object"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault to store secrets in."
              }
            }
          },
          "variables": {
            "eventGridTopicApiKeySecretName": "TripExternalizationsEventGridTopicApiKey"
          },
          "resources": [
            {
              "type": "Microsoft.EventGrid/topics",
              "apiVersion": "2020-06-01",
              "name": "[parameters('eventGridTopicName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "publicNetworkAccess": "Enabled",
                "inputSchema": "EventGridSchema"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('eventGridTopicApiKeySecretName'))]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName')), '2020-06-01').key1]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName'))]"
              ]
            }
          ],
          "outputs": {
            "eventGripEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.EventGrid/topics', parameters('eventGridTopicName'))).endpoint]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('signalRName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "signalRName": {
            "value": "[variables('signalRName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "2675249973579397886"
            }
          },
          "parameters": {
            "signalRName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceTags": {
              "type": "object"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Key Vault to store secrets in."
              }
            }
          },
          "variables": {
            "signalRConnectionStringSecretName": "AzureSignalRConnectionString"
          },
          "resources": [
            {
              "type": "Microsoft.SignalRService/signalR",
              "apiVersion": "2018-10-01",
              "name": "[parameters('signalRName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "sku": {
                "name": "Free_F1",
                "tier": "Free",
                "size": "F1",
                "capacity": 1
              },
              "properties": {
                "hostNamePrefix": null
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('signalRConnectionStringSecretName'))]",
              "properties": {
                "value": "[listKeys(resourceId('Microsoft.SignalRService/signalR', parameters('signalRName')), '2018-10-01').primaryConnectionString]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.SignalRService/signalR', parameters('signalRName'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('applicationInsightsName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[variables('applicationInsightsName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "14891316511597726658"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceTags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "kind": "other",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "properties": {
                "Application_Type": "web"
              }
            }
          ],
          "outputs": {
            "appInsightsName": {
              "type": "string",
              "value": "[parameters('applicationInsightsName')]"
            },
            "appInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))).InstrumentationKey]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('apimName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "apimName": {
            "value": "[variables('apimName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "appInsightsName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsName.value]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))).outputs.appInsightsInstrumentationKey.value]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "9214130584774277020"
            }
          },
          "parameters": {
            "apimName": {
              "type": "string",
              "metadata": {
                "description": "API Management DB account name"
              }
            },
            "appInsightsName": {
              "type": "string"
            },
            "appInsightsInstrumentationKey": {
              "type": "string"
            },
            "resourceTags": {
              "type": "object"
            },
            "sku": {
              "type": "string",
              "defaultValue": "Developer",
              "metadata": {
                "description": "The pricing tier of this API Management service"
              },
              "allowedValues": [
                "Consumption",
                "Developer",
                "Basic",
                "Standard",
                "Premium"
              ]
            },
            "skuCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "The instance size of this API Management service."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location of this API Management service"
              }
            }
          },
          "variables": {
            "publisherEmail": "email@contoso.com",
            "publisherName": "Company Name"
          },
          "resources": [
            {
              "type": "Microsoft.ApiManagement/service",
              "apiVersion": "2021-01-01-preview",
              "name": "[parameters('apimName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "sku": {
                "name": "[parameters('sku')]",
                "capacity": "[parameters('skuCount')]"
              },
              "properties": {
                "publisherEmail": "[variables('publisherEmail')]",
                "publisherName": "[variables('publisherName')]"
              },
              "identity": {
                "type": "SystemAssigned"
              }
            },
            {
              "type": "Microsoft.ApiManagement/service/loggers",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', parameters('apimName'), parameters('appInsightsName'))]",
              "properties": {
                "loggerType": "applicationInsights",
                "description": "Logger resources to APIM",
                "credentials": {
                  "instrumentationKey": "[parameters('appInsightsInstrumentationKey')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]"
              ]
            },
            {
              "type": "Microsoft.ApiManagement/service/diagnostics",
              "apiVersion": "2021-01-01-preview",
              "name": "[format('{0}/{1}', parameters('apimName'), 'applicationinsights')]",
              "properties": {
                "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apimName'), parameters('appInsightsName'))]",
                "alwaysLog": "allErrors",
                "logClientIp": true,
                "sampling": {
                  "percentage": 100,
                  "samplingType": "fixed"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apimName'))]",
                "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apimName'), parameters('appInsightsName'))]"
              ]
            }
          ],
          "outputs": {
            "gatewayUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName'))).gatewayUrl]"
            },
            "apiIPAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ApiManagement/service', parameters('apimName'))).publicIPAddresses[0]]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', variables('applicationInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('staticWebAppName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "staticWebAppName": {
            "value": "[variables('staticWebAppName')]"
          },
          "location": {
            "value": "[parameters('staticWebAppLocation')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "990238708955225645"
            }
          },
          "parameters": {
            "staticWebAppName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceTags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/staticSites",
              "apiVersion": "2021-02-01",
              "name": "[parameters('staticWebAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('resourceTags')]",
              "sku": {
                "name": "Standard",
                "tier": "Standard"
              },
              "properties": {
                "buildProperties": {
                  "appLocation": "/web/serverless-microservices-web",
                  "apiLocation": "",
                  "outputLocation": "dist",
                  "appArtifactLocation": "dist"
                }
              }
            }
          ],
          "outputs": {
            "staticWebAppURL": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/staticSites', parameters('staticWebAppName'))).contentDistributionEndpoint]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('functionAppServicePlanName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('functionAppServicePlanName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "1091027108330860427"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "sku": {
                "name": "Y1",
                "tier": "Dynamic"
              },
              "properties": {}
            }
          ],
          "outputs": {
            "appServicePlanId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[variables('keyVaultName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "functionAppPrefix": {
            "value": "[parameters('applicationName')]"
          },
          "functionApps": {
            "value": "[variables('functionsApps')]"
          },
          "resourceTags": {
            "value": "[parameters('resourceTags')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "3427998671960147103"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "functionAppPrefix": {
              "type": "string"
            },
            "functionApps": {
              "type": "array"
            },
            "resourceTags": {
              "type": "object"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-06-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "accessPolicies",
                    "count": "[length(range(0, length(parameters('functionApps'))))]",
                    "input": {
                      "tenantId": "[reference(resourceId('Microsoft.Web/sites', format('{0}{1}', parameters('functionAppPrefix'), parameters('functionApps')[range(0, length(parameters('functionApps')))[copyIndex('accessPolicies')]])), '2021-01-15', 'full').identity.tenantId]",
                      "objectId": "[reference(resourceId('Microsoft.Web/sites', format('{0}{1}', parameters('functionAppPrefix'), parameters('functionApps')[range(0, length(parameters('functionApps')))[copyIndex('accessPolicies')]])), '2021-01-15', 'full').identity.principalId]",
                      "permissions": {
                        "secrets": [
                          "get"
                        ]
                      }
                    }
                  }
                ],
                "sku": {
                  "name": "standard",
                  "family": "A"
                },
                "tenantId": "[subscription().tenantId]"
              },
              "tags": "[parameters('resourceTags')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', format('{0}Drivers', parameters('applicationName')))]",
        "[resourceId('Microsoft.Web/sites', format('{0}Passengers', parameters('applicationName')))]",
        "[resourceId('Microsoft.Web/sites', format('{0}Passengers', parameters('applicationName')))]",
        "[resourceId('Microsoft.Web/sites', format('{0}TripArchiver', parameters('applicationName')))]",
        "[resourceId('Microsoft.Web/sites', format('{0}Trips', parameters('applicationName')))]"
      ]
    }
  ]
}